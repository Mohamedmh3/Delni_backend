"""
Django settings for backend_bus_pr project.

Generated by 'django-admin startproject' using Django 5.2.4.
Enhanced with deployment and database deployment configurations.

This settings file includes:
- Environment-specific configurations (development, staging, production)
- Production database settings (PostgreSQL, Redis caching)
- Security configurations for production deployment
- Container and orchestration support (Docker, Kubernetes)
- Error tracking and monitoring (Sentry)
- Background task processing (Celery)
- Email configuration for production
- Health checks and performance monitoring

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/

Environment Variables Required:
- ENVIRONMENT: Set to 'production', 'staging', or 'development'
- For Production: DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, REDIS_URL, CORS_ALLOWED_ORIGINS
- For Staging: STAGING_DB_NAME, STAGING_DB_USER, STAGING_DB_PASSWORD, STAGING_DB_HOST
- Optional: SENTRY_DSN, CELERY_ENABLED, DOCKER_ENABLED, KUBERNETES_ENABLED
"""

from pathlib import Path
from decouple import config
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY', default='django-insecure-h7yld%5+t#801^)(n0b@b$tc=ctbv!(!qvs1^2l1-xe3ry2-)d')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DJANGO_DEBUG', default=True, cast=bool)

# Allow all hosts for development (not for production!)
ALLOWED_HOSTS = ['*']
print("ALLOWED_HOSTS:", ALLOWED_HOSTS)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'drf_yasg',
    'bus',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add whitenoise for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend_bus_pr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend_bus_pr.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# MongoDB Atlas Configuration
MONGO_URI = os.getenv("MONGO_URI")
MONGODB_DATABASE = config('MONGODB_DATABASE', default='bus')
MONGODB_COLLECTION = config('MONGODB_COLLECTION', default='bus')

# Use SQLite for Django ORM (since we're using pymongo directly for MongoDB)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 20,
        }
    }
}

# Disable database validation during startup
DATABASE_ROUTERS = []


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Whitenoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'django': {
        'handlers': ['console'],
        'level': 'INFO',
        'propagate': False,
    },
    'bus.graph_routing': {
        'handlers': ['console'],
        'level': 'DEBUG',
        'propagate': False,
    },
}

# Taxi suggestion threshold (in meters)
TAXI_SUGGESTION_DISTANCE = 1000

# Production Settings
if not DEBUG:
    # Security settings for production
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # CORS settings for production
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])
    
    # Static files configuration
    STATIC_ROOT = BASE_DIR / 'staticfiles'
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Performance and caching settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutes
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Session configuration
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# Additional logging for production
if not DEBUG:
    LOGGING['handlers']['file'] = {
        'class': 'logging.FileHandler',
        'filename': BASE_DIR / 'logs' / 'django.log',
        'formatter': 'verbose',
    }
    LOGGING['root']['handlers'].append('file')
    LOGGING['django']['handlers'].append('file')

# Create logs directory if it doesn't exist
import os
if not DEBUG:
    os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# API Rate limiting (optional - requires django-ratelimit)
RATE_LIMIT_ENABLED = config('RATE_LIMIT_ENABLED', default=False, cast=bool)
RATE_LIMIT_RATE = config('RATE_LIMIT_RATE', default='100/h', cast=str)

# Monitoring and health check settings
HEALTH_CHECK_ENABLED = True
HEALTH_CHECK_TIMEOUT = 30  # seconds

# Application-specific settings
BUS_ROUTE_SETTINGS = {
    'MAX_ROUTES_PER_REQUEST': 10,
    'MAX_LEGS_PER_ROUTE': 4,
    'ENTRY_THRESHOLD_METERS': 300,
    'EXIT_THRESHOLD_METERS': 300,
    'TRANSFER_THRESHOLD_METERS': 400,
    'MIN_BUS_DISTANCE_METERS': 400,  # Minimum bus distance before allowing transfers
    'WALKING_SPEED_KMH': 5.0,
    'BUS_SPEED_KMH': 20.0,
    'TAXI_SUGGESTION_DISTANCE': TAXI_SUGGESTION_DISTANCE,
}

# Geospatial Query Optimization Settings
COORDINATE_SIMPLIFICATION_ENABLED = config('COORDINATE_SIMPLIFICATION_ENABLED', default=True, cast=bool)
TARGET_COORDINATES_PER_ROUTE = config('TARGET_COORDINATES_PER_ROUTE', default=100, cast=int)
SIMPLIFICATION_TOLERANCE_M = config('SIMPLIFICATION_TOLERANCE_M', default=50, cast=int)

# MongoDB Query Optimization
USE_BOUNDING_BOX_FILTER = config('USE_BOUNDING_BOX_FILTER', default=True, cast=bool)
BOUNDING_BOX_BUFFER_KM = config('BOUNDING_BOX_BUFFER_KM', default=5, cast=int)
MAX_ROUTES_PER_QUERY = config('MAX_ROUTES_PER_QUERY', default=50, cast=int)

# Graph-Based Routing Settings
TRANSFER_THRESHOLD_M = config('TRANSFER_THRESHOLD_M', default=400, cast=int)
ENTRY_EXIT_INTERVAL_M = config('ENTRY_EXIT_INTERVAL_M', default=500, cast=int)
MAX_ROUTE_LEGS = config('MAX_ROUTE_LEGS', default=4, cast=int)
BOUNDING_BOX_BUFFER_M = config('BOUNDING_BOX_BUFFER_M', default=500, cast=int)

# Comprehensive Routing Settings
COMPREHENSIVE_ROUTE_LIMIT = config('COMPREHENSIVE_ROUTE_LIMIT', default=50, cast=int)
DEFAULT_MAX_ROUTES = config('DEFAULT_MAX_ROUTES', default=10, cast=int)
TAXI_SUGGESTION_THRESHOLD_M = config('TAXI_SUGGESTION_THRESHOLD_M', default=500, cast=int)
TAXI_RECOMMENDATION_THRESHOLD_M = config('TAXI_RECOMMENDATION_THRESHOLD_M', default=1000, cast=int)

# Caching Settings
CACHE_ENABLED = config('CACHE_ENABLED', default=True, cast=bool)
CACHE_TIMEOUT = config('CACHE_TIMEOUT', default=300, cast=int)  # 5 minutes

# Performance Monitoring
PERFORMANCE_MONITORING_ENABLED = config('PERFORMANCE_MONITORING_ENABLED', default=True, cast=bool)
QUERY_TIMEOUT_SECONDS = config('QUERY_TIMEOUT_SECONDS', default=30, cast=int)

# =============================================================================
# DEPLOYMENT AND DATABASE DEPLOYMENT SETTINGS
# =============================================================================

# Environment Detection
ENVIRONMENT = config('ENVIRONMENT', default='development')

# Auto-detect Railway deployment
if os.getenv('RAILWAY_ENVIRONMENT') or os.getenv('RAILWAY_SERVICE_NAME'):
    ENVIRONMENT = 'production'
    print("Railway deployment detected, setting environment to production")
    
    # Railway-specific settings
    ALLOWED_HOSTS = ['*']  # Railway handles this
    DEBUG = False
    SECURE_SSL_REDIRECT = False  # Railway handles SSL
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

IS_PRODUCTION = ENVIRONMENT == 'production'
IS_STAGING = ENVIRONMENT == 'staging'

# Production Database Configuration
if IS_PRODUCTION:
    # Check for Railway PostgreSQL URL first
    railway_db_url = os.getenv('DATABASE_URL')
    if railway_db_url:
        # Parse Railway's DATABASE_URL
        import urllib.parse
        parsed = urllib.parse.urlparse(railway_db_url)
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': parsed.path[1:],  # Remove leading slash
                'USER': parsed.username,
                'PASSWORD': parsed.password,
                'HOST': parsed.hostname,
                'PORT': parsed.port or '5432',
                'OPTIONS': {
                    'sslmode': 'require',
                    'connect_timeout': 10,
                },
                'CONN_MAX_AGE': 600,  # 10 minutes
                'CONN_HEALTH_CHECKS': True,
            }
        }
        print("Using Railway PostgreSQL database")
    else:
        # Fallback to manual configuration
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': config('DB_NAME', default='bus_db'),
                'USER': config('DB_USER', default='bus_user'),
                'PASSWORD': config('DB_PASSWORD', default=''),
                'HOST': config('DB_HOST', default='localhost'),
                'PORT': config('DB_PORT', default='5432'),
                'OPTIONS': {
                    'sslmode': 'require' if config('DB_SSL_MODE', default='require') == 'require' else 'disable',
                    'connect_timeout': 10,
                },
                'CONN_MAX_AGE': 600,  # 10 minutes
                'CONN_HEALTH_CHECKS': True,
            }
        }
    
    # Redis for caching in production
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', default='redis://localhost:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                },
                'SOCKET_CONNECT_TIMEOUT': 5,
                'SOCKET_TIMEOUT': 5,
            },
            'TIMEOUT': 300,
            'KEY_PREFIX': 'bus_api',
        }
    }
    
    # Production security settings
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    
    # Production CORS settings
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOWED_HEADERS = [
        'accept',
        'accept-encoding',
        'authorization',
        'content-type',
        'dnt',
        'origin',
        'user-agent',
        'x-csrftoken',
        'x-requested-with',
    ]
    
    # Production static files
    STATIC_ROOT = BASE_DIR / 'staticfiles'
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
    
    # Production media files
    MEDIA_URL = config('MEDIA_URL', default='/media/')
    MEDIA_ROOT = BASE_DIR / 'media'

# Staging Database Configuration
elif IS_STAGING:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('STAGING_DB_NAME', default='bus_staging'),
            'USER': config('STAGING_DB_USER', default='bus_staging_user'),
            'PASSWORD': config('STAGING_DB_PASSWORD', default=''),
            'HOST': config('STAGING_DB_HOST', default='localhost'),
            'PORT': config('STAGING_DB_PORT', default='5432'),
            'OPTIONS': {
                'sslmode': 'prefer',
                'connect_timeout': 10,
            },
            'CONN_MAX_AGE': 300,  # 5 minutes
        }
    }
    
    # Staging CORS settings
    CORS_ALLOWED_ORIGINS = [
        "https://staging.yourdomain.com",
        "http://localhost:3000",
    ]

# Development Database Configuration (enhanced)
else:
    # Enhanced SQLite for development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
            'OPTIONS': {
                'timeout': 20,
                'check_same_thread': False,
            }
        }
    }
    
    # Optional: Use PostgreSQL for development if configured
    if config('USE_POSTGRES_DEV', default=False, cast=bool):
        DATABASES['default'] = {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DEV_DB_NAME', default='bus_dev'),
            'USER': config('DEV_DB_USER', default='bus_dev_user'),
            'PASSWORD': config('DEV_DB_PASSWORD', default=''),
            'HOST': config('DEV_DB_HOST', default='localhost'),
            'PORT': config('DEV_DB_PORT', default='5432'),
            'OPTIONS': {
                'connect_timeout': 10,
            },
        }

# Email Configuration for Production
if IS_PRODUCTION:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
    EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@yourdomain.com')
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Celery Configuration (for background tasks)
CELERY_ENABLED = config('CELERY_ENABLED', default=False, cast=bool)
if CELERY_ENABLED:
    CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
    CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TIMEZONE = TIME_ZONE
    CELERY_TASK_TRACK_STARTED = True
    CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes

# Docker and Container Settings
DOCKER_ENABLED = config('DOCKER_ENABLED', default=False, cast=bool)
if DOCKER_ENABLED:
    ALLOWED_HOSTS = ['*']  # Configure properly for production
    DEBUG = False
    HEALTH_CHECK_URL = '/health/'

# Railway-specific health check
if os.getenv('RAILWAY_ENVIRONMENT') or os.getenv('RAILWAY_SERVICE_NAME'):
    HEALTH_CHECK_URL = '/api/health/'

# Kubernetes Settings
KUBERNETES_ENABLED = config('KUBERNETES_ENABLED', default=False, cast=bool)
if KUBERNETES_ENABLED:
    POD_NAME = config('POD_NAME', default='')
    NAMESPACE = config('NAMESPACE', default='default')
    K8S_READINESS_PROBE = True
    K8S_LIVENESS_PROBE = True

# Error Tracking
SENTRY_DSN = config('SENTRY_DSN', default='')
if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        environment=ENVIRONMENT,
        traces_sample_rate=0.1 if IS_PRODUCTION else 1.0,
        send_default_pii=True,
    )

# Final environment-specific overrides
if IS_PRODUCTION:
    DEBUG = False
    ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])
    MONGO_URI = config('PRODUCTION_MONGO_URI', default=MONGO_URI)
    MONGODB_DATABASE = config('PRODUCTION_MONGODB_DATABASE', default=MONGODB_DATABASE)
    
elif IS_STAGING:
    DEBUG = config('STAGING_DEBUG', default=False, cast=bool)
    ALLOWED_HOSTS = config('STAGING_ALLOWED_HOSTS', default='', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])
    
else:
    DEBUG = True
    ALLOWED_HOSTS = ['*']
    MONGO_URI = config('DEV_MONGO_URI', default=MONGO_URI)
    MONGODB_DATABASE = config('DEV_MONGODB_DATABASE', default=MONGODB_DATABASE)

# Print deployment information
print(f"Environment: {ENVIRONMENT}")
print(f"Debug: {DEBUG}")
print(f"Database: {DATABASES['default']['ENGINE']}")
print(f"MongoDB Database: {MONGODB_DATABASE}")
